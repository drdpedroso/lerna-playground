'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PostmsgTransport = exports.KEY = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createChannel;

var _storybookChannel = require('@kadira/storybook-channel');

var _storybookChannel2 = _interopRequireDefault(_storybookChannel);

var _jsonStringifySafe = require('json-stringify-safe');

var _jsonStringifySafe2 = _interopRequireDefault(_jsonStringifySafe);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KEY = exports.KEY = 'storybook-channel';

function createChannel(_ref) {
  var page = _ref.page;

  var transport = new PostmsgTransport({ page: page });
  return new _storybookChannel2.default({ transport: transport });
}

var PostmsgTransport = exports.PostmsgTransport = function () {
  function PostmsgTransport(config) {
    var _this = this;

    _classCallCheck(this, PostmsgTransport);

    this._config = config;
    this._buffer = [];
    this._handler = null;
    window.addEventListener('message', this._handleEvent.bind(this), false);
    document.addEventListener('DOMContentLoaded', function () {
      return _this._flush();
    });
    // Check whether the config.page parameter has a valid value
    if (config.page !== 'manager' && config.page !== 'preview') {
      throw new Error('postmsg-channel: "config.page" cannot be "' + config.page + '"');
    }
  }

  _createClass(PostmsgTransport, [{
    key: 'setHandler',
    value: function setHandler(handler) {
      this._handler = handler;
    }
  }, {
    key: 'send',
    value: function send(event) {
      var _this2 = this;

      var iframeWindow = this._getWindow();
      if (!iframeWindow) {
        return new Promise(function (resolve, reject) {
          _this2._buffer.push({ event: event, resolve: resolve, reject: reject });
        });
      }
      var data = (0, _jsonStringifySafe2.default)({ key: KEY, event: event });
      iframeWindow.postMessage(data, '*');
      return Promise.resolve(null);
    }
  }, {
    key: '_flush',
    value: function _flush() {
      var _this3 = this;

      var buffer = this._buffer;
      this._buffer = [];
      buffer.forEach(function (item) {
        _this3.send(item.event).then(item.resolve).catch(item.reject);
      });
    }
  }, {
    key: '_getWindow',
    value: function _getWindow() {
      if (this._config.page === 'manager') {
        // FIXME this is a really bad idea! use a better way to do this.
        // This finds the storybook preview iframe to send messages to.
        var iframe = document.getElementById('storybook-preview-iframe');
        if (!iframe) {
          return null;
        }
        return iframe.contentWindow;
      }
      return window.parent;
    }
  }, {
    key: '_handleEvent',
    value: function _handleEvent(e) {
      if (!e.data || typeof e.data !== 'string') {
        return;
      }
      var data = void 0;
      try {
        data = JSON.parse(e.data);
      } catch (e) {
        return null;
      }
      if (!data || (typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {
        return null;
      }
      var _data = data,
          key = _data.key,
          event = _data.event;

      if (key === KEY) {
        this._handler(event);
      }
    }
  }]);

  return PostmsgTransport;
}();